Протокол реализован в отдельном классе rpc. Запись и чтение на физическом уровне производитьсяв методах TxUartTask и RxUartTask.  Канальный уровень - processRxDataTask, processTxData.Транспортный уровень - rxMassegTask, processListTxMassege(контролирует время жизни пакета).  Программный уровень, отправка сообщений через метод sendCommand, прием сообщений через хендл очереди сообщений rxOutMessageQueue, ошибки не передаются, но ничего не мешает добавить еще одну очередь для ошибок.

Сделать предложение по улучшению протокола не могу, по причине не очень большого опыта использования протоколов. Попытаюсь сделать анализ. У меня сразу возник вопрос по использованию двух контрольных сумм. Возможно это сделано для слабых контроллеров, если в потоке часто возникают ошибки что бы не тратить время на обработку всего пакета. Непонятно зачем нужен стартовый байт данных. Могу предположить что в одном пакете может передаваться несколько сообщений, и стартовым байтом они разделяются, решение не очень удачное, стартовый байт может попасться в самом сообщении. Стоповый байт тоже можно по идее исключить так как нам известно размер пакета. Я бы попробовал убрать контрольную сумму заголовка, стартовый байт данных и стоповый байт. Получиться почти Модбас протокол. 
